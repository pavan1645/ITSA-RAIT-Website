Parallel Projections
#include<stdio.h>
#include<graphics.h>
#include<math.h>
void input(int[],int[],int[],int);
void printfFigure(int[],int[],int);
void printfFigure_ortho(int[],int[],int);
void getOblique(int [] , int [],int [] , int , float , int [],int [],int);
int main() {
  int gd=DETECT,gm;
  int x[10],y[10],z[10],no,xp[10],yp[10],choice;
  float angle1;
  printf("Enter Your choice : \n");
  printf("1:Point\n");
  printf("2 : Line\n");
  printf("3 : Triangle\n");
  printf("4 : Square\n");
  printf("Or Enter no of vertices for any Polygon\n");
  scanf("%d",&no);
  printf("Enter angle Phi\t");
  scanf("%f",&angle1);
  input(x,y,z,no);
  initgraph(&gd,&gm,NULL);
  printf("Orthographic Projenction(WHITE)\n");
  printfFigure_ortho(x,y,no);
  printf("Oblique Projenction(YELLOW)\n");
  printf("Enter 1. Cavalier Projection\n 2. Cabinet Projection\n");
  scanf("%d",&choice);
  getOblique(x,y,z,no,angle1,xp,yp,choice);
  setcolor(YELLOW);
  printfFigure(xp,yp,no);
getch();
  return 0;
}
void input(int x[],int y[],int z[],int no) {
  int i;
  printf("Enter co-ordinate\n");
  for (i = 0; i < no; i++) {
    printf("P[%d]\t",i+1); 
    scanf("%d",&x[i]);
    scanf("%d",&y[i]);
    scanf("%d",&z[i]);
  }
}
void getOblique(int x[],int y[],int z[],int no,float angle1,int xp[],int yp[],int choice) {
  int i;
  for (i = 0; i < no; ++i) {
     if(choice==1) {
        xp[i]=x[i]+(z[i]/tan(45))*cos(angle1);
        yp[i]=y[i]+(z[i]/tan(45))*sin(angle1);
     }
     if(choice==2) {
        xp[i]=x[i]+(z[i]/tan(63.43))*cos(angle1);
        yp[i]=y[i]+(z[i]/tan(63.43))*sin(angle1);
     }
  }
}
void printfFigure(int xp[],int yp[],int no) {
  int i;
  if(no==1) {
   putpixel(xp[0],yp[0],YELLOW);
} else {
       for (i = 0; i < no-1; ++i) {
        line(xp[i],yp[i],xp[i+1],yp[i+1]);
      }
  }
  if(no>2) {
    line(xp[0],yp[0],xp[no-1],yp[no-1]);
  }
}
void printfFigure_ortho(int x[],int y[],int no) {
  int i;
  if(no==1) {
   putpixel(x[0],y[0],YELLOW);
  } else {
       for (i = 0; i < no-1; ++i) {
        line(x[i],y[i],x[i+1],y[i+1]);
      }
  }
  if(no>2) {
    line(x[0],y[0],x[no-1],y[no-1]);
  }
}

Output

Enter Your choice : 
1:Point
2 : Line
3 : Triangle
4 : Square
Or Enter no of vertices for any Polygon


3
Enter angle Phi 50
Enter co-ordinate
P[1]    150
200
250
P[2]    250
200
250
P[3]    200
300
150


 
