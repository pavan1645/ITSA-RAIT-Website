3D Transformation



#include<stdio.h>
#include<graphics.h>
#include<math.h>
void main() {
  float points[4][6],tx,ty,tz,sx,sy,sz,angle;
  int i,j,choice;
  printf("Enter four points for tetrahedron (x,y,z):\n");
  for(i=0;i<4;i++)
    for(j=0;j<3;j++)
      scanf("%f",&points[i][j]);
printf("\n1.Translation\n2.Scaling\n3.Rotation\nEnter choice: ");
  scanf("%d",&choice);
  switch(choice) {
    case 1:
      printf("Enter translation values tx,ty,tz: ");
      scanf("%f%f%f",&tx,&ty,&tz);
      for(i=0;i<4;i++) {
        points[i][3]=points[i][0]+tx;
        points[i][4]=points[i][1]+ty;
        points[i][5]=points[i][2]+tz;
      }
      break;
    case 2:
      printf("Enter scaling factors sx,sy,sz: ");
      scanf("%f%f%f",&sx,&sy,&sz);
      for(i=0;i<4;i++) {
        points[i][3]=points[i][0]*sx;
        points[i][4]=points[i][1]*sy;
        points[i][5]=points[i][2]*sz;
      }
      break;
    case 3:
      printf("Enter rotation angle: ");
      scanf("%f",&angle);
      for(i=0;i<4;i++) {
        points[i][3]=points[i][0];
        points[i][4]=(points[i][1]*cos(angle))+(points[i][2]*sin(angle));
        points[i][5]=(points[i][2]*cos(angle))-(points[i][1]*sin(angle));
      }
      break;
    default:
      printf("Invalid choice!");
      exit(0);
  }
  int gd=DETECT,gm;
  initgraph(&gd,&gm,NULL);
  for(i=0;i<4;i++) {
    points[i][0]-=(points[i][2]*sin(45));
    points[i][1]-=(points[i][2]*cos(45));
    points[i][3]-=(points[i][5]*sin(45));
    points[i][4]-=(points[i][5]*cos(45));
  }
line(points[0][0],points[0][1],points[1][0],points[1][1]);
line(points[0][0],points[0][1],points[2][0],points[2][1]);
line(points[0][0],points[0][1],points[3][0],points[3][1]);
line(points[1][0],points[1][1],points[2][0],points[2][1]);
line(points[1][0],points[1][1],points[3][0],points[3][1]);
line(points[2][0],points[2][1],points[3][0],points[3][1]);
  setcolor(RED);
line(points[0][3],points[0][4],points[1][3],points[1][4]);
line(points[0][3],points[0][4],points[2][3],points[2][4]);
line(points[0][3],points[0][4],points[3][3],points[3][4]);
line(points[1][3],points[1][4],points[2][3],points[2][4]);
line(points[1][3],points[1][4],points[3][3],points[3][4]);
line(points[2][3],points[2][4],points[3][3],points[3][4]);
  getch();
  closegraph();
}