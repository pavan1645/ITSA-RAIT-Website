Mid-point Circle Algorithm
#include<stdio.h>
#include<graphics.h>
void main()
{
int gd=DETECT,gm;
int i,r,x,y,xc,yc;
float d;
printf("Enter Radius\n");
scanf("%d",&r);
printf("Enter Center of circle\n"); 
scanf("%d",&xc);
scanf("%d",&yc);
initgraph(&gd,&gm,NULL);
d=1.25-r;
x=0;
y=r;
do
{
if(d<0)
{
x=x+1;
d=d+2*x+1;
}
else
{
x=x+1;
y=y-1;
d=d+2*x-2*y+10;
}
putpixel(xc+x,yc+y,5);
putpixel(xc-y,yc-x,5);
putpixel(xc+y,yc-x,5);
putpixel(xc-y,yc+x,5);
putpixel(xc+y,yc+x,5);
putpixel(xc-x,yc-y,5);
putpixel(xc+x,yc-y,5);
putpixel(xc-x,yc+y,5);
}
while(x<y);
getch();
closegraph();
}


Implementation of Bezier curve in C
#include<stdio.h>
#include<graphics.h>
#include<math.h>
void main() {
  int x1,y1,x2,y2,x3,y3,x4,y4;
  double t;
  printf("Enter four points: ");
  scanf("%d%d%d%d%d%d%d%d",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);
  int gd=DETECT,gm;
  initgraph(&gd,&gm,NULL);
  for(t=0.0;t<1.0;t+=0.001) {
    double xt=(pow(1-t,3)*x1)+(3*pow(1-t,2)*t*x2)+(3*(1-t)*pow(t,2)*x3)+(pow(t,3)*x4);
    double yt=(pow(1-t,3)*y1)+(3*pow(1-t,2)*t*y2)+(3*(1-t)*pow(t,2)*y3)+(pow(t,3)*y4);
    putpixel(round(xt),round(yt),GREEN);
  }
  putpixel(x1,y1,YELLOW);
  putpixel(x2,y2,YELLOW);
  putpixel(x3,y3,YELLOW);
  putpixel(x4,y4,YELLOW);
  getch();
  closegraph();
}


Implementation of 4-connected flood fill algorithm
#include<stdio.h>
#include<graphics.h>
void flood(int x,int y,int target,int rep);
void main() {
int x1,y1,x2,y2,x3,y3,x4,y4;
printf("Enter four points: ");
scanf("%d%d%d%d%d%d%d%d",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);
int fx,fy;
printf("Enter seed point: ");
scanf("%d%d",&fx,&fy);
int gd=DETECT,gm;
initgraph(&gd,&gm,NULL);
line(x1,y1,x2,y2);
line(x2,y2,x3,y3);
line(x3,y3,x4,y4);
line(x4,y4,x1,y1);
flood(fx,fy,0,15);
getch();
}
void flood(int x,int y,int target,int rep) {
if(target!=rep) {
if(getpixel(x,y)==target) {
putpixel(x,y,rep);
flood(x-1,y,target,rep);
flood(x,y+1,target,rep);
flood(x,y-1,target,rep);
flood(x+1,y,target,rep);
}
}
}


Implementation of 4-connected boundary fill algorithm
#include<stdio.h>
#include<graphics.h>
void bound(int x,int y,int target,int rep);
void main() {
int x1,y1,x2,y2,x3,y3,x4,y4;
printf("Enter four points: ");
scanf("%d%d%d%d%d%d%d%d",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);
int fx,fy;
printf("Enter seed point: ");
scanf("%d%d",&fx,&fy);
int gd=DETECT,gm;
initgraph(&gd,&gm,NULL);
line(x1,y1,x2,y2);
line(x2,y2,x3,y3);
line(x3,y3,x4,y4);
line(x4,y4,x1,y1);
bound(fx,fy,15,15);
getch();
}
void bound(int x,int y,int boundary,int fill) {
int current=getpixel(x,y);
if(current!=boundary&&current!=fill) {
putpixel(x,y,fill);
bound(x-1,y,boundary,fill);
bound(x,y+1,boundary,fill);
bound(x,y-1,boundary,fill);
bound(x+1,y,boundary,fill);
}
}
